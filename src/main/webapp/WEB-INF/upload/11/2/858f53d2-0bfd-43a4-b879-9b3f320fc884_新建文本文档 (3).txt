事务的四个特性：
	A：原子性  表示事务要么全部成功 要么全部失败
	C: 一致性 在事务执行前，数据库的数据处于正确状态。那么事务执行完毕以后，数据的状态也应该是正确的状态。比如转账
	I: 隔离性：并发事务之间执行互不影响
	D:持久性：事务一旦执行成功，那么它对于数据库的改变就是永久的

多线程开发：
	1.多线程的使用场景：
		程序中出现需要等待的操作，比如IO操作，网络操作，可以利用多线程充分使用处理器资源而不会阻塞程序中其他任务的执行
		程序中出现可分解的大任务，比如耗时较长的计算任务，可以用多线程来共同完成任务，缩短运算时间
		程序中出现需要后台进行的任务，比如一些监测任务，定时任务，可以利用多线程来实现
	实现方式  runnable  Thread   callable  executor	
	线程安全：
	volatile
	synchronized
	lock


我们这个而项目，使用的是nginx搭建的tomcat集群，采用redis作为内存数据库和热点数据的缓存，


数据库优化  ：
	索引优化
		
	使用join链接查询代替子查询；不要使用select * 会返回无用字段；不要有超过5个以上的表连接（JOIN），
	选取合适的字段属性：对于数据库字段的可变长度，知道长度的将长度定义完整，不知道长度的采用可变长度存储；将数据库的字段尽量设置not null（避免了与null的比较）；
	在合适的字段上加索引（性别字段就不适合加索引，因为重复次数太多）
	导入大量数据时最好先删除索引再插入数据，再加入索引，不然，mysql会花费大量时间在更新索引上
	将需要查询的结果预先计算好放在表中，查询的时候再Select。
	配置合适的线程数量，内存足够的话配置线程数量=最大链接数量+5
	开启缓存
	
	当只要一行数据时使用 LIMIT 1 

	选择表合适存储引擎：

	myisam: 应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。

	Innodb： 事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。（Innodb有效地降低删除和更新导致的锁定）。对于支持事务的InnoDB类型的表来说，影响速度的主要原因是AUTOCOMMIT默认设置是打开的，而且程序没有显式调用BEGIN 开始事务，导致每插入一条都自动提交，严重影响了速度。可以在执行sql前调用begin，多条sql形成一个事物（即使autocommit打开也可以），将大大提高性能。 


	